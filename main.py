import re
from datetime import datetime

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InputMediaPhoto
from aiogram.utils import executor

import keyboards as kb

from config import TOKEN
from payment import payment_history_last, wallet_money, random_comment

from sqlite import SQLighter
from utils import States

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

dp.middleware.setup(LoggingMiddleware())

dbase = SQLighter('db.db')

info_main = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Ç—É—Ç –µ—Å—Ç—å:\n" \
            "\n/wallet - –º–µ–Ω—é –∫–æ—à–µ–ª—å–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç.\n" \
            "\n/make_an_order - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É, —á—Ç–æ–±—ã –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å –µ–≥–æ –≤–∞–º.\n" \
            "\n/find_order - –µ—Å–ª–∏ –≤—ã —ç–∫—Å–ø–µ—Ä—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n" \
            "\n/personal_area - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª—è—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞–∫–∞–∑—ã.\n" \
            "\n/rules - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n" \
            "\n/technical_support - –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"

info_payment = '–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª –∫–æ—à–µ–ª—å–∫–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n' \
               '\n/balance - —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.\n' \
               '\n/top_up_balance - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n' \
               '\n/withdrawal_of_funds - –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.\n' \
               '\n/home - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n'


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞, –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
    if message.from_user.username is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ. \n"
            "1) –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞ \n"
            "2) –í–æ –≤–∫–ª–∞–¥ –ê–∫–∫–∞—É–Ω—Ç –≤ –ø–æ–ª–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–∏–∫ \n"
            "3) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'", reply_markup=kb.reg_menu)
        await States.Reg_0.set()


    elif not dbase.get_user(message.from_user.id):
        dbase.add_user(message.from_user.id, message.from_user.username)
        await message.answer(
            info_main,
            reply_markup=kb.start_menu)

        print(message.text[7:])

    else:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω')
        await message.answer(info_main, reply_markup=kb.start_menu)


@dp.message_handler(state=States.Reg_0)
async def reg_nickname(message: types.Message, state: FSMContext):
    if message.from_user.username is None:
        await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞", reply_markup=kb.reg_menu)
    else:
        dbase.add_user(message.from_user.id, message.from_user.username)
        await message.answer(
            info_main,
            reply_markup=kb.start_menu)
        await state.finish()


@dp.message_handler(commands=['help'], state=None)
async def command_info(message: types.Message):
    await message.reply('–î–æ–ø–∏–ª–∏—Ç—å')


@dp.message_handler(Text(equals=["–ö–æ—à–µ–ª–µ–∫ üëõ", "/wallet"]))
async def wallet(message: types.Message):
    if dbase.block_check(message.from_user.id)[0] != "BAN":
        await message.answer(info_payment, reply_markup=kb.wallet_menu)
    else:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏, \n"
                             "–æ–±—Ä–∞—Ç–∏–µ—Ç—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ProgML –¥–ª—è —Ä–∞–∑–±–ª–∞–∫–∏—Ä–æ–≤–∫–∏.")


@dp.message_handler(Text(equals=["–ü—Ä–∞–≤–∏–ª–∞ üìö", "/rules"]))
async def rules(message: types.Message):
    await message.reply('–£ –Ω–∞—Å –Ω–µ–ª—å–∑—è:\n'
                        '1) –°–ø–∞–º–∏—Ç—å\n'
                        '2) –†—É–≥–∞—Ç—å—Å—è –º–∞—Ç–æ–º\n'
                        '3) –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã\n')


@dp.message_handler(Text(equals=["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", "/home"]))
async def back_home(message: types.Message):
    await message.answer(info_main, reply_markup=kb.start_menu)


@dp.message_handler(Text(equals=["–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí∏", "/top_up_balance"]))
async def wallet(message: types.Message):
    await message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω Qiwi –∫–æ—à–µ–ª–µ–∫, –∏ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–π–¥—É—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –±–æ—Ç–∞)\n'
        '\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 9650581883', reply_markup=types.ReplyKeyboardRemove())

    await States.STATE_0.set()


@dp.message_handler(state=States.STATE_0)
async def phone_number(message: types.Message, state: FSMContext):
    phone = message.text
    phone_reg = r'[8-9]{1}[0-9]{9}'
    comment = random_comment()
    if re.match(phone_reg, phone) and len(phone) == 10:
        dbase.get_money(message.from_user.id, phone, comment)
        await message.answer('–í–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –¥–ª—è –µ–≥–æ –ø–æ–ø–ª–Ω–µ–∏—è –≤–∞–º —Å–ª–µ–¥—É–µ—Ç —Å–¥–µ–∞–ª—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n'
                             '\n 1. –ó–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è QIWI \n'
                             '\n 2. –í —Ä–∞–∑–¥–µ–ª–µ "–ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–µ–µ—Ä–µ–≤–æ–¥—ã" –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç: "–ù–∞ QIWI –ö–æ—à–µ–ª–µ–∫" \n'
                             '\n 3. –í –ø–æ—è–≤–∏–≤—à–µ–µ–º—Å—è –æ–∫–Ω–µ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä QIWI: 79313353175 \n'
                             '\n 4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –≤–∞–º *–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ* –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É,'
                             f' –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–∏ –≤–∫–∞–ª–¥–∫—É "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π" –∏ —É–∫–∞–∂–∏—Ç–µ —Å–ª—É–¥—é—â–∏–π –∫–æ–¥: {comment}\n'
                             f'\n –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ"',
                             reply_markup=kb.replenishment_menu, parse_mode='Markdown')


    else:
        await message.answer('–í–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=kb.wallet_menu)

    await state.finish()


@dp.message_handler(Text(equals=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ']))
async def confirm(message: types.Message):
    old_balance = dbase.check_balance(message.from_user.id)[2]
    res = dbase.check(message.from_user.id)
    phoneDB = "+7" + res[1]
    listPayment = payment_history_last()
    for i in range(len(listPayment['data'])):
        if (listPayment['data'][i]['account']) == phoneDB:
            if (listPayment['data'][i]['comment']) == str(res[2]):
                dbase.update_balance(round(listPayment['data'][i]['sum']['amount'] + old_balance, 2),
                                     message.from_user.id)
    dbase.delete_money(message.from_user.id)
    await message.answer('–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.',
                         reply_markup=kb.wallet_menu)


@dp.message_handler(Text(equals=['–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå']))
async def undo(message: types.Message):
    dbase.delete_money(message.from_user.id)
    await message.answer('–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=kb.wallet_menu)


@dp.message_handler(Text(equals=['–ë–∞–ª–∞–Ω—Å üí∞', '/balance']))
async def balance(message: types.Message):
    await message.answer("–ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ: " + str(dbase.check_balance(message.from_user.id)[2]) + " —Ä—É–±–ª–µ–π",
                         reply_markup=kb.wallet_menu)


@dp.message_handler(Text(equals=['–í—ã–≤–µ—Å—Ç–∏ üèß', '/withdrawal_of_funds']))
async def send_money(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –¥–µ–Ω—å–≥–∏. \n "
                         "\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 9650581883", reply_markup=types.ReplyKeyboardRemove())
    await States.STATE_1.set()


@dp.message_handler(state=States.STATE_1)
async def get_phone(message: types.Message, state=FSMContext):
    try:
        phone = message.text
        phone_reg = r'[8-9]{1}[0-9]{9}'
        balance = dbase.check_balance(message.from_user.id)[2]
        balance_with_commission = balance - (balance * 5) / 100
        if re.match(phone_reg, phone) and len(phone) == 10 and balance_with_commission >= 10:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –æ–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª–∫–µ, –∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞"
                "—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: \n"
                "\n1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ 10 —Ä—É–±–ª–µ–π\n"
                "\n2. –ü—Ä–∏ –≤–≤–æ–¥–µ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 340")

            await message.answer(f"\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ : {balance_with_commission} —Ä—É–±–ª–µ–π")
            await state.update_data(phone1=phone, balance=balance_with_commission, balance1=balance)
            await States.next()

        elif balance_with_commission <= 10:
            await message.answer(
                f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ 10 —Ä—É–±–ª–µ–π, –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ: {balance_with_commission}',
                reply_markup=kb.wallet_menu)
            await state.finish()
        else:
            await message.answer('–í–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=kb.wallet_menu)
            await state.finish()
    except TypeError:
        print("–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ-–∫–æ–¥–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–µ–Ω–µ–≥ —Å –±–æ—Ç–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫")


@dp.message_handler(state=States.STATE_2)
async def get_amount(message: types.Message, state: FSMContext):
    amount = message.text
    data = await state.get_data()
    phone1 = data.get("phone1")
    balance_with_commission = data.get("balance")
    balance = data.get("balance1")
    try:
        if balance_with_commission >= (float(amount)) >= 10:
            wallet_money("+7" + phone1, amount)
            dbase.update_balance(round(balance - float(amount), 2), message.from_user.id)
            await message.answer('–í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ –≤–∞–º –Ω–∞ QIWI –∫–æ—à–µ–ª–µ–∫.', reply_markup=kb.wallet_menu)
        else:
            await message.answer(
                '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –∏–ª–∏ –≤–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑',
                reply_markup=kb.wallet_menu)
            await state.finish()
    except ValueError:
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {amount}, –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: 200.32',
                             reply_markup=kb.wallet_menu)

    await state.finish()


@dp.message_handler(Text(equals=['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üôãüèº‚Äç‚ôÇ', '/make_an_order']))
async def send_work(message: types.Message):
    if dbase.block_check(message.from_user.id)[0] != "BAN":
        balance = dbase.check_balance(message.from_user.id)[2]
        if balance > 0:
            await message.answer('–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
                                 reply_markup=kb.place_menu)
            await States.Task_0.set()
        else:
            await message.answer('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ—Å—å —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
                                 reply_markup=kb.wallet_menu)
    else:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏, \n"
                             "–æ–±—Ä–∞—Ç–∏–µ—Ç—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ProgML –¥–ª—è —Ä–∞–∑–±–ª–∞–∫–∏—Ä–æ–≤–∫–∏.")


@dp.message_handler(state=States.Task_0)
async def show_domain(message: types.Message, state=None):
    place = message.text
    if place == '–®–∫–æ–ª–∞' or place == '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç':
        if place == '–®–∫–æ–ª–∞':
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=kb.domain_menu_s)
        elif place == '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç':
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=kb.domain_menu_u)
        await States.next()
    else:
        await message.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â–µ —Ä–∞–∑...',
                             reply_markup=kb.start_menu)
        await state.finish()


@dp.message_handler(state=States.Task_1)
async def choose_domain(message: types.Message, state: FSMContext):
    s = []
    for domain in dbase.selectAllDomains():
        for dec in domain:
            s.append(dec)
    domain = message.text
    if domain in s:
        async with state.proxy() as data:
            data["domain"] = domain
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—ç—Ç–æ—Ç —à–∞–≥ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)',
            reply_markup=types.ReplyKeyboardRemove())
        await States.next()

    else:
        await message.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...',
                             reply_markup=kb.start_menu)
        await state.finish()


@dp.message_handler(state=States.Task_2)
async def set_dz(message: types.Message, state: FSMContext):
    technicalDZ = message.text
    print(technicalDZ)
    async with state.proxy() as data:
        data["technicalDZ"] = technicalDZ
    print(data)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è...')
    await States.next()


@dp.message_handler(state=States.Task_3, content_types=['photo', 'document', 'text'])
async def save_photo(message: types.Message, state: FSMContext):
    if message.photo:
        photo = message.photo[0].file_id
        print(photo)
        async with state.proxy() as data:
            data["photo"] = photo
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è,"
                             "–ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: 22/05/2021 15:40",
                             reply_markup=types.ReplyKeyboardRemove())
        await States.next()
    elif message.document:
        await message.answer("–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ...", reply_markup=kb.start_menu)
        await state.finish()
    elif message.text:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω–æ–º —à–∞–≥–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...",
                             reply_markup=kb.start_menu)
        await state.finish()
    else:
        await message.answer("–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ...")
        await state.finish()


@dp.message_handler(state=States.Task_4)
async def set_deadline(message: types.Message, state: FSMContext):
    deadline = message.text
    current_datetime = datetime.now()
    try:
        date_str = datetime.strptime(deadline, "%d/%m/%Y %H:%M")
        print(date_str)
        if current_datetime < date_str:
            async with state.proxy() as data:
                data["deadline"] = deadline
            await message.answer(
                "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤—ã—à–∞—Ç—å —Å—É–º–º—ã –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ, –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 120",
                reply_markup=types.ReplyKeyboardRemove())
            await States.next()
        else:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∫–æ—Ç–æ—Ä–∞—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                 reply_markup=kb.start_menu)
            await state.finish()
    except ValueError:
        await message.answer("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: 22/05/2021 15:40",
                             reply_markup=kb.start_menu)
        await state.finish()


@dp.message_handler(state=States.Task_5)
async def set_amount(message: types.Message, state: FSMContext):
    amount = message.text
    balance = dbase.check_balance(message.from_user.id)[2]
    try:
        if int(amount) <= balance:
            dbase.update_balance(round(balance - float(amount), 2), message.from_user.id)
            async with state.proxy() as data:
                data["amount"] = amount
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–∞–π–¥–µ—Ç –≤–∞—Å",
                                 reply_markup=kb.start_menu)
            dbase.addTask(message.from_user.id, data["domain"], data["technicalDZ"], data["photo"], data["deadline"],
                          data["amount"], "waiting")
            print(data["amount"])
            await state.finish()
        else:
            await message.answer(
                "–í—ã —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞—é—â–∏—é –≤–∞—à –æ—Å—Ç–∞—Ç–æ–∫, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                reply_markup=kb.start_menu)
            await state.finish()
    except ValueError:
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏ :{amount}, –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: 120", reply_markup=kb.start_menu)
        await state.finish()


@dp.message_handler(Text(equals=['–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ üë®‚Äçüè´', '/find_order']))
async def find(message: types.Message):
    if dbase.block_check(message.from_user.id)[0] != "BAN":
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ \n'
                             f'–í —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {dbase.countPlace("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")[0]} \n'
                             f'–í —à–∫–æ–ª–µ: {dbase.countPlace("–®–∫–æ–ª–∞")[0]} \n',
                             reply_markup=kb.place_menu)
        await States.Order_0.set()
    else:
        await message.answer("–í–∞—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏, \n"
                             "–æ–±—Ä–∞—Ç–∏–µ—Ç—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ProgML –¥–ª—è —Ä–∞–∑–±–ª–∞–∫–∏—Ä–æ–≤–∫–∏.")


@dp.message_handler(state=States.Order_0)
async def show_task_photo(message: types.Message, state=None):
    place = message.text
    result = dbase.selectAllTask(place)
    count = dbase.countPlace(place)
    if len(result) != 0:
        for i in range(count[0]):
            task = [InputMediaPhoto(result[i][3], f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{result[i][0]} \n"
                                                  f"–ü—Ä–µ–¥–º–µ—Ç: {result[i][1]} \n"
                                                  f"–î–µ–¥–ª–∞–π–Ω: {result[i][4]} \n"
                                                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {result[i][5]} —Ä—É–±–ª–µ–π \n"
                                                  f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {result[i][2]}")]
            await bot.send_media_group(message.from_user.id, task)
            await state.finish()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç"
                             " –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∏–º–∏.", reply_markup=kb.home_menu)
        await States.Order_1.set()
    else:
        await state.finish()
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç.", reply_markup=kb.start_menu)


@dp.message_handler(state=States.Order_1)
async def show_contact(message: types.Message, state=None):
    choose = message.text
    username = str(dbase.get_username(choose)[0])
    if message.from_user.username != username:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞: @" + username, reply_markup=kb.start_menu)
    else:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.", reply_markup=kb.start_menu)
    await state.finish()


@dp.message_handler(Text(equals=["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üß∞", "/personal_area"]))
async def check_local_area(message: types.Message):
    result = dbase.select_task(message.from_user.id)
    count = dbase.count_task(message.from_user.id)
    if len(result) != 0:
        for i in range(count[0]):
            tasks = [InputMediaPhoto(result[i][4], f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{result[i][0]} \n"
                                                   f"–î–µ–¥–ª–∞–π–Ω: {result[i][1]} \n"
                                                   f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {result[i][2]} —Ä—É–±–ª–µ–π \n"
                                                   f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å : {str(dbase.find_username(result[i][3])[0]) if result[i][3] > -1 else '–µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–∂–¥–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –≤—ã–±–µ—Ä–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑'}")]
            await bot.send_media_group(message.from_user.id, tasks)


@dp.message_handler(commands=['delete'])
async def delete_command(message: types.Message):
    if dbase.get_admin(message.from_user.id)[0] == 1:
        dbase.delete_task(message.text.split()[1])
        await message.answer("–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏...", reply_markup=kb.start_menu)


@dp.message_handler(commands=['ban'])
async def block_delete_command(message: types.Message):
    if dbase.get_admin(message.from_user.id)[0] == 1:
        userId = message.text.split()[1]
        dbase.update_users(dbase.find_userId_taskId(userId))
        dbase.delete_task(userId)
        await message.answer("–ù–µ—É–≥–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏...", reply_markup=kb.start_menu)


@dp.message_handler(commands=['unban'])
async def block_delete_command(message: types.Message):
    if dbase.get_admin(message.from_user.id)[0] == 1:
        userName = message.text.split()[1]
        print(userName)
        dbase.command_unblock(userName)
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏...", reply_markup=kb.start_menu)


@dp.message_handler()
async def other(message: types.Message):
    dbase.delete_money(message.from_user.id)
    await message.answer(
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É @ProgML',
        reply_markup=kb.home_menu)


if __name__ == '__main__':
    executor.start_polling(dp)  ##Run
